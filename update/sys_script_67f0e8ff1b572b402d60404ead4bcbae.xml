<?xml version="1.0" encoding="UTF-8"?><record_update sys_domain="global" table="sys_script">
    <sys_script action="INSERT_OR_UPDATE">
        <abort_action>false</abort_action>
        <access>package_private</access>
        <action_delete>false</action_delete>
        <action_insert>false</action_insert>
        <action_label/>
        <action_name/>
        <action_query>false</action_query>
        <action_run_at>server</action_run_at>
        <action_update>true</action_update>
        <active>true</active>
        <add_message>false</add_message>
        <advanced>true</advanced>
        <application/>
        <change_fields>false</change_fields>
        <client_callable>false</client_callable>
        <collection>x_pinr_wsc_wsc_request</collection>
        <condition/>
        <description>Checks to see if the update is either Subbmitted, Approved or Rejected and triggers the apporprate event based on which status the request is being updated to.</description>
        <execute_function>false</execute_function>
        <filter_condition/>
        <is_rest>false</is_rest>
        <message/>
        <name>WSC Request Status Updated</name>
        <onclick/>
        <order>100</order>
        <priority>100</priority>
        <read_access_action>false</read_access_action>
        <rest_method/>
        <rest_method_text/>
        <rest_service/>
        <rest_service_text/>
        <rest_variables/>
        <role_conditions/>
        <script><![CDATA[(function executeRule(current, previous /*null when async*/) {

	   if (current.operation() == "update" & current.request_status.changesTo("Submitted")) {
			var list = current.wells.toString();
			var array = list.split(",");
			var hasProducing = false;
			for(var i =0; i < array.length; i++) {
				var gr = new GlideRecord('x_pinr_wsc_wsc_request_well');
				gr.newRecord();
				gr.initialize();
				gr.well = array[i];
				gr.current_status = gr.well.well_status;
				var fromStatus = gr.well.well_status.value;
				if(fromStatus == "P") { 
					hasProducing = true;
				}
				gr.wsc_request = current.sys_id;
				
				gr.insert();
			}
				var foo = new WSCFunctions();
				var emailConfig = foo.getEmailConfig(current);
				var param1 = "";
				var param2 = emailConfig.initial_dist_list;
				gs.eventQueue("x_pinr_wsc.New_WSC_Request_Submitted",current, param1, param2);
		   }
			// Reqyest Approved
			else if (current.operation() == "update" & current.request_status.changesTo("Approved")) {
 				var param3 = "";
				var param4 = "";//emailConfig2.initial_dist_list;
				gs.eventQueue("x_pinr_wsc.WSC_Request_Approved",current, param3, param4);
		    }
	
			else if (current.operation() == "update" & current.request_status.changesTo("Rejected")) {

				gs.error("WSC - Running business rule for request status to be changed to rejected");	
				var emailList = "";
				emailList += current.opened_by.email;
				// get tasks for this request 
				var grtasks = new GlideRecord("x_pinr_wsc_wsc_task");
				grtasks.addQuery("wsc_request", current.sys_id);
				grtasks.query();
				while (grtasks.next()) {
					if (!grtasks.closed_by.nil()) {
						if (!grtasks.closed_by.email.nil()) {
							emailList += "," + grtasks.closed_by.email;
						}
					} 
				}

				var wellnames = "";
				var grwells = new GlideRecord("x_pinr_wsc_wsc_request_well");
				grwells.addQuery("wsc_request", current.sys_id);
				grwells.query();
				while (grwells.next()) {
							wellnames +=  grwells.well.name + ",";
				}
				
				var payload = {};
				payload.well_names = wellnames;
				payload.wsc_request_number = current.number.toString();
				payload.from_status = current.from_status.display_name.toString();
				payload.to_status = current.new_well_status.display_name.toString();
				payload.change_date = current.change_date.toString();
				payload.mailing_list = emailList;
				var param5 = JSON.stringify(payload);

				var param6 = emailList;
				gs.eventQueue("x_pinr_wsc.WSC_Request_Rejected",current, param5, param6);
		    }


})(current, previous);]]></script>
        <sys_class_name>sys_script</sys_class_name>
        <sys_created_by>gadgi161</sys_created_by>
        <sys_created_on>2019-02-05 02:05:30</sys_created_on>
        <sys_customer_update>false</sys_customer_update>
        <sys_domain>global</sys_domain>
        <sys_id>67f0e8ff1b572b402d60404ead4bcbae</sys_id>
        <sys_mod_count>21</sys_mod_count>
        <sys_name>WSC Request Status Updated</sys_name>
        <sys_overrides/>
        <sys_package display_value="Well Status Change" source="x_pinr_wsc">09863b231306ab00dd9251522244b01c</sys_package>
        <sys_policy/>
        <sys_replace_on_upgrade>false</sys_replace_on_upgrade>
        <sys_scope display_value="Well Status Change">09863b231306ab00dd9251522244b01c</sys_scope>
        <sys_update_name>sys_script_67f0e8ff1b572b402d60404ead4bcbae</sys_update_name>
        <sys_updated_by>rosen768</sys_updated_by>
        <sys_updated_on>2019-03-13 19:51:06</sys_updated_on>
        <template/>
        <when>before</when>
    </sys_script>
</record_update>
